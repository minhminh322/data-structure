
package structures;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import programs.Word;

/**
 * HashMap implementation.
 * @author minhphan
 * @version Winter 2019
 *
 */
public class HashMapADT {

    /**
     * Default Constructor.
     */
    public HashMapADT() {

    }

    /**
     * Store given List to HashMap.
     * 
     * @param theList pass the List.
     */
    public void addHashMap(final List<String> theList) {
        final HashMap<String, Word> hashmap = new HashMap<>();
        Word wordValue;
        /* place list words into a HashMap. */
        for (String word : theList) {
            wordValue = hashmap.get(word);
            if (wordValue == null) {
                hashmap.put(word, new Word(word));
            } else {
                wordValue.increaseWordCount();
            }
        }

        final ValueComparator hashsort = new ValueComparator(hashmap);
        final Map<String, Word> newHash = new TreeMap<String, Word>(hashsort);
        newHash.putAll(hashmap);

        for (Word words : newHash.values()) {
            System.out.println(words);
        }
    }

    //
    // /**
    // * Inner static class for sort by value.
    // * @author minhphan
    // *s
    // */
    // public static class ValueComparator implements Comparator<String> {
    // /** base map. **/
    // protected Map<String, Word> myBase;
    //
    // /**
    // * Inner Constructor.
    // * @param theBase pass the map.
    // */
    // ValueComparator(final Map<String, Word> theBase) {
    // myBase = theBase;
    // }
    //
    // /**
    // * Method for comparing.
    // * @param theK1 map key of object 1.
    // * @param theK2 map key of object 2.
    // * @return 1, -1, or 0.
    // */
    // public int compare(final String theK1, final String theK2) {
    // if (myBase.get(theK1).getWordCount() >= myBase.get(theK2).getWordCount())
    // {
    // return -1;
    // } else {
    // return 1;
    // } // returning 0 would merge keys
    // }
    // }
}
