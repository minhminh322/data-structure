package id01;

import java.util.*;

public class Distance1Map {
	private Map<String, List<String>> x;
	private Set<String> words;

	public Distance1Map() {
		x = new TreeMap<String, List<String>>();
		words = new HashSet<String>();
	}

	public void create(List<String> y) {
		ArrayList<String> z = new ArrayList<String>();
		for (int i = 0; i < y.size(); i++) {
			int difference = 0;
			char[] key = y.get(i).toCharArray();
			for (int j = 0; j < y.size(); j++) {
				difference = 0;
				char[] compare = y.get(j).toCharArray();
				for (int k = 0; k < key.length; k++) {
					if (key[k] != compare[k]) {
						difference++;
					}
				}
				if (difference == 1) {
					z.add(String.valueOf(compare));
				}
			}
			String key1 = String.valueOf(key);
			x.put(key1, z);
			z = new ArrayList<String>();
		}
	}

	public boolean hasWord(String word) {
		boolean returnValue = false;
		if (x.containsKey(word)) {
			returnValue = true;
		}
		return returnValue;
	}

	public String toString() {
		String returnValue = "";
		Object[] y = x.keySet().toArray();
		for (int i = 0; i < y.length; i++) {
			returnValue += y[i] + ": ";
			for (int j = 0; j < x.get(y[i]).size(); i++) {
				returnValue += x.get(y[i]).get(j) + " ";
			}
			returnValue += "\n";
		}
		return returnValue;
	}

	public boolean oneOff(String s1, String s2) {
		boolean returnValue = false;
		for (int i = 0; i < x.get(s1).size(); i++) {
			if (s2.equals(x.get(s1).get(i))) {
				returnValue = true;
			}
		}
		return returnValue;
	}

	public int distance(String s1, String s2) {
		Stack<String> temp = helperDistance(s1, s2);
		if (temp.isEmpty())
			return -1;
		else
			return temp.size() - 1;
	}

	public Stack<String> helperDistance(String s1, String s2) {
		Queue<Stack<String>> stack = new LinkedList<Stack<String>>();
		Queue<Stack<String>> temp = new LinkedList<Stack<String>>();
		Stack<String> answer = new Stack<String>();
		for (int i = 0; i < x.get(s1).size(); i++) {
			stack.add(new Stack<String>());
			while (!stack.peek().isEmpty())	
				stack.add(stack.remove());
			stack.peek().push(s1);
			stack.peek().push(x.get(s1).get(i));
		}
		temp.addAll(stack);
		words.add(s1);
		while (!temp.isEmpty()) {
			Stack<String> z = temp.remove();
			if (z.peek().equals(s2)) {
				answer = z;
				
			}
			
		}
		
		if (answer.empty())
		{
			for (int i = 0; i < x.get(s1).size(); i++)
			{
				temp = new LinkedList<Stack<String>>();
				temp.add(helperDistance(x.get(s1).get(i), s2));
			}
			answer.addAll(temp.peek());
		}
		words.add(s2);
		return answer;
		/*
		 * words.add(s1); if (!x.get(s1).isEmpty() && !oneOff(s1, s2)) { for (int i = 0;
		 * i < x.get(s1).size(); i++) { if (!words.contains(x.get(s1).get(i))) {
		 * distanceOf += 1; helperDistance(x.get(s1).get(i), s2); } } } else if
		 * (oneOff(s1, s2)) { distanceOf += 1; } else if (x.get(s1).isEmpty()) {
		 * distanceOf -= 1; return -1; } return distanceOf;
		 */
	}
	
	public Set<String> getPath() {
		Set<String> x = new HashSet<String>(words);
		return x;
	}
	
	/**
	 * The INTERNAL method returns the map (NOTE: Varik ADDED for grading)
	 * @return the map
	 */
	public Map<String, List<String>> getInternalMap()
	{
		return x;
	}
}
