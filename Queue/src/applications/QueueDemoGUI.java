/* * TCSS 342 */package applications;import java.awt.BorderLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import structures.LinkedOutputRestrictedDeque;/** * A simple GUI to demonstrate enqueue and dequeue Stack operations. *  * @author Minh Phan     * @version Winter 2019 */public class QueueDemoGUI extends JPanel {    /** A generated version ID for serialization. */    private static final long serialVersionUID = 4303607662476596133L;    /** The default width for text fields and text areas. */    private static final int TEXT_WIDTH = 20;    /** The default height for text areas. */    private static final int TEXT_HEIGHT = 6;    /** The width used in various margins and insets. */    private static final int PADDING = 20;    /** A message to display when the stack is empty. */    private static final String EMPTY_MESSAGE = "The Queue is empty.";    /** The escape sequence used to embed a quote symbol in a String. */    private static final String QUOTE = "\"";    /**     * Displays current stack contents.     */    private final JTextArea myQueueArea;    /**     * Input text field.     */    private final JTextField myInputText;    /**     * Displays all actions performed on the Stack.     */    private final JTextArea myActionArea;    /**     * A button used to enqueue an element on the Stack.     */    private final JButton myEnqueueButton;    /**     * The stack used in the demo.     */    private final LinkedOutputRestrictedDeque<String> myQueue =                    new LinkedOutputRestrictedDeque<>();    /**     * Sets up the GUI.     */    public QueueDemoGUI() {        super();        myInputText = new JTextField(TEXT_WIDTH);        myQueueArea = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);        myActionArea = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);        myEnqueueButton = new JButton("Enqueue");        setupComponets();    }    /**     * Helper method to perform the work of setting up the GUI components.     */    private void setupComponets() {        myEnqueueButton.addActionListener(new EnqueueListener());        myEnqueueButton.setMnemonic(KeyEvent.VK_U);        final JButton enqueueFrontButton = new JButton("Enqueue Front");        enqueueFrontButton.addActionListener(new EnqueueFrontListener());        enqueueFrontButton.setMnemonic(KeyEvent.VK_H);        final JButton dequeueButton = new JButton("Dequeue");        dequeueButton.addActionListener(new DequeueListener());        dequeueButton.setMnemonic(KeyEvent.VK_O);        final JLabel inputLabel = new JLabel("Add to queue: ");        myInputText.setEditable(true);        myQueueArea.setMargin(new Insets(PADDING, PADDING, PADDING, PADDING));        myQueueArea.setEditable(false);        myQueueArea.setFocusable(false);        myQueueArea.setText(EMPTY_MESSAGE);        myActionArea.setMargin(new Insets(PADDING, PADDING, PADDING, PADDING));        myActionArea.setEditable(false);        myActionArea.setFocusable(false);        final JPanel inputPanel = new JPanel();        inputPanel.add(inputLabel);        inputPanel.add(myInputText);        inputPanel.add(myEnqueueButton);        inputPanel.add(enqueueFrontButton);        inputPanel.add(dequeueButton);        setLayout(new BorderLayout());        add(new JScrollPane(myQueueArea), BorderLayout.NORTH);        add(inputPanel, BorderLayout.CENTER);        add(new JScrollPane(myActionArea), BorderLayout.SOUTH);        setBorder(BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING));    }    /**     * Creates and displays the application frame.     */    public void display() {        final JFrame frame = new JFrame("Queue Demo");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setContentPane(this);        frame.pack();        frame.setResizable(false);        frame.setLocationRelativeTo(null);        frame.setVisible(true);        myInputText.grabFocus();        getRootPane().setDefaultButton(myEnqueueButton);    }    // inner classes    /**     * An action listener for the enqueue button.     */    private class EnqueueListener implements ActionListener {        /**         * Adds the contents of the user entry text field to the top of this         * stack.         *          * @param theEvent incoming event         */        public void actionPerformed(final ActionEvent theEvent) {            final String toenqueue = myInputText.getText();            if (toenqueue.length() == 0) {                myActionArea.append("Cannot enqueue at front empty data.\n");            } else {                myQueue.enqueue(toenqueue);                myActionArea.append(QUOTE + toenqueue + QUOTE                                    + " was enqueueed at front onto the queue.\n");                myQueueArea.setText(myQueue.toString());                myQueueArea.setCaretPosition(0); // forces scroll up                myInputText.setText(null); // clears input field            }            myInputText.grabFocus();        }    }    /**     * An action listener for the enqueue button.     */    private class EnqueueFrontListener implements ActionListener {        /**         * Adds the contents of the user entry text field to the top of this         * stack.         *          * @param theEvent incoming event         */        public void actionPerformed(final ActionEvent theEvent) {            final String toenqueue = myInputText.getText();            if (toenqueue.length() == 0) {                myActionArea.append("Cannot enqueue empty data.\n");            } else {                myQueue.enqueueAtFront(toenqueue);                myActionArea.append(QUOTE + toenqueue + QUOTE                                    + " was enqueueed onto the queue.\n");                myQueueArea.setText(myQueue.toString());                myQueueArea.setCaretPosition(0); // forces scroll up                myInputText.setText(null); // clears input field            }            myInputText.grabFocus();        }    }    /**     * An action listener for the dequeue button.     */    private class DequeueListener implements ActionListener {        /**         * removes the element at the top of this stack.         *          * @param theEvent incoming event         */        public void actionPerformed(final ActionEvent theEvent) {            if (myQueue.isEmpty()) {                myActionArea.append("Cannot dequeue from an empty stack.\n");            } else {                final String dequeueped = myQueue.dequeue();                myActionArea.append(QUOTE + dequeueped + QUOTE                                    + " was dequeueped off the stack.\n");                if (myQueue.isEmpty()) {                    myQueueArea.setText(EMPTY_MESSAGE);                } else {                    myQueueArea.setText(myQueue.toString());                }                myQueueArea.setCaretPosition(0);                myInputText.setText(null);            }            myInputText.grabFocus();        }    }}