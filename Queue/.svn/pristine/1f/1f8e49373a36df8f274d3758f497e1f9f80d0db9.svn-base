
package applications;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import structures.LinkedOutputRestrictedDeque;

public class RadixSortDemo {

    private static File myFile = new File("./input100.txt");

    /** Scanner variable. */
    private static Scanner myInput;

    private static LinkedOutputRestrictedDeque<Integer> myQueue;

    private static List<LinkedOutputRestrictedDeque> myDigitQueue;
    
    private final static int TEN_DIGITS = 10;
    
    
    public RadixSortDemo() {
        
    }

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        // Scanner keyboard = new Scanner(System.in);
        // String filename = keyboard.nextLine();
        readFile(myFile);
        radixSort(myQueue);

    }

    /**
     * Read and scan the file input.
     * 
     * @param theInput file.
     */
    private static void readFile(final File theInput) {
        FileReader reader = null;
        try {
            reader = new FileReader(theInput);
        } catch (final FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        myInput = new Scanner(reader);
        myQueue = new LinkedOutputRestrictedDeque<>();
        while (myInput.hasNextInt()) {
            myQueue.enqueue(myInput.nextInt());

        }
        // System.out.println(myQueue.toString());

    }

    /**
     * Radix Sort method.
     * 
     * @param theQueue unsorted queue.
     * @return sorted queue.
     */
    public static LinkedOutputRestrictedDeque<Integer> radixSort(final LinkedOutputRestrictedDeque<Integer> theQueue) {

        
        /*
         * ArrayList to hold the 10 digit queues.
         */
        myDigitQueue = new ArrayList<>();
        for (int i = 0; i <= TEN_DIGITS; i++) {
            myDigitQueue.add(new LinkedOutputRestrictedDeque<Integer>());
        }

        for (int i = 0; i < 4; i++) {
            /*
             * Examine the least significant digit and put them into 10 digit
             * queues.
             */
            while (!myQueue.isEmpty()) {

                int num = myQueue.dequeue();

                final int remainder = num % 10;

                if (remainder == 0) {
                    myDigitQueue.get(0).enqueue(num);
                } else if (remainder == 1) {
                    myDigitQueue.get(1).enqueue(num);
                } else if (remainder == 2) {
                    myDigitQueue.get(2).enqueue(num);
                } else if (remainder == 3) {
                    myDigitQueue.get(3).enqueue(num);
                } else if (remainder == 4) {
                    myDigitQueue.get(4).enqueue(num);
                } else if (remainder == 5) {
                    myDigitQueue.get(5).enqueue(num);
                } else if (remainder == 6) {
                    myDigitQueue.get(6).enqueue(num);
                } else if (remainder == 7) {
                    myDigitQueue.get(7).enqueue(num);
                } else if (remainder == 8) {
                    myDigitQueue.get(8).enqueue(num);
                } else if (remainder == 9) {
                    myDigitQueue.get(9).enqueue(num);
                }
                

            }
            // System.out.println(myDigitQueue.get(1));

            /*
             * enqueue to main queue what digit queue dequeue.
             */
            for (int j = 0; j < myDigitQueue.size(); j++) {
                while (!myDigitQueue.get(j).isEmpty()) {
                    myQueue.enqueue((Integer) myDigitQueue.get(j).dequeue());
                }
            }


            System.out.println(myQueue.toString());
        }

        return null;

    }
}
